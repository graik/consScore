import re
import numpy as np
from biskit.exe import Executor

class rate4site(Executor):

    def read2matrix(self, file, identity=True, score=True, qqint=False, std=False,
                    msa=False):
        """
        Take the output from rate4site and convert it into a numpy array, mapping
        each conservation score onto its corresponding amino acid
        Args:
            file: The output from the Rate4Site program, version 2.01
        Returns:
            An array, where the entry at each index contains information about 
            the amino acid at that position. Note that the 
        """
        with open(file, 'r') as f:
            contents = f.read()
            residues = rate4site.extract_resi(contents)
            l = [identity, score, qqint, std, msa]
            num = l.count(True)
            r2mat = np.empty([1,num])
            for r in residues:
                resi = np.array([])
                #TODO: This is a LOT of repeated code- This method in particular is where I 
                # am asking for help the most
                if identity is True:
                    amino = rate4site.extract(r, 1) 
                    resi = np.append(resi, amino)
                if score is True:
                    conse = rate4site.extract(r, 2)
                    resi = np.append(resi, conse)
                if qqint is True:
                    intqq = rate4site.extract(r, 3)
                    resi = np.append(resi, intqq)
                if std is True:
                    stdev = rate4site.extract(r, 4)
                    resi = np.append(resi, stdev)
                if msa is True:
                    align = rate4site.extract(r, 5)
                    resi = np.append(resi, align)
                resi = resi.reshape((1, num))
                r2mat = np.concatenate((r2mat, resi), axis=0)
            r2mat = np.delete(r2mat, 0, axis=0)
            return r2mat

    @classmethod
    def extract(cls, string, parameter):
        """
        Pull the specified word from a string. 
        """
        splitted = string.split()
        return splitted[parameter]

    @classmethod
    def extract_resi(cls, string):
        """
        Grabs the lines of the table that correspond to amino acid data, and puts
        them in a list.
        Args:
            string(str): The contents of the rate4site file
        Returns:
            The rows of the amino acid table as a list of strings.
        """
        splitted = string.split('\n')
        residues = []
        for s in splitted:
            if not s.startswith('#'):
                residues.append(s)
        residues = list(filter(lambda x: x is not '', residues))
        return residues

    def get_alpha(self, r4s):
        """
        Get the alpha parameter of the conservation scores
        Note: These methods is especially susceptible to changes in the format of
        the output file
        """
        #TODO: when the reckoning happens, open the r4s file once, call get alpha
        # and read2matrix- none of this multiple opening nonsense
        with open(r4s, 'r') as f:
            contents = f.read()
            splitted = contents.split('\n')
            parameter = ''
            for s in splitted:
                if re.search('alpha parameter', s):
                    parameter = s
                    break
                else: continue
            parameter = rate4site.get_num(parameter)
            return parameter[0]

    @classmethod
    def get_num(cls, string):
        """
        Takes a string and returns the first number in that string, decimal included
        Args:
            string(str): The string containing a number
        Returns:
            A list of all the numbers contained in that string, as floats
        """
        digits = r"[0-9]*\.?[0-9]+"
        parameter = re.findall(digits, string)
        return list(map(float, parameter))
